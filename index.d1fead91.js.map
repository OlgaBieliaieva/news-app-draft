{"mappings":"AAAA,MAEMA,EAAkB,CACtBC,MAAO,mCACPC,IAAK,QACLC,KAAK,MACLC,MAAO,UAGFC,eAAeC,EAAkBC,GACtCC,QAAQC,IAAIF,GAEZP,EAAgBE,IAAMK,EAASG,SAC/BV,EAAgBG,IAAMI,EAASI,UAE/B,MAAMC,EAAU,IAAIC,gBAAgBb,GACpC,aAAac,MAAM,mDAAcF,KAAWG,MAAKC,IAC/C,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAMF,EAASG,QAE3B,OAAOH,EAASI,MAAM,G,CAInBf,eAAegB,IACpB,MAAMT,EAAU,IAAIC,gBAAgBb,GACpC,aAAac,MAAM,mDAAcF,KAAWG,MAAKC,IAC/C,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAMF,EAASG,QAE3B,OAAOH,EAASI,MAAM,G,CC9B1B,MAAME,EAAO,CACXC,cAAeC,SAASC,cAAc,oBAGjC,SAASC,EAAYV,GAC1BR,QAAQC,IAAIO,GAQd,SAAsBA,GACpB,MAAMW,EAAgB,CACpBC,KAAM,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACjDC,OAAQ,CACN,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OAEFC,gBAAgBC,GACd,OAAOC,KAAKJ,KAAKG,EAAKE,S,EAExBC,kBAAkBH,GAChB,OAAOC,KAAKH,OAAOE,EAAKI,W,GAGtBC,EAAO,IAAIC,MAenB,SAAqBC,GACnBhB,EAAKC,cAAcgB,mBAAmB,YAAaD,E,CAJnDE,CAXe,+DACiBxB,EAASyB,KAAKC,KAAKC,QAAQ,iGAEnB3B,EAAS4B,QAAQ,GAAGH,gDAC5BzB,EAAS6B,iEAGnBlB,EAAcG,gBAChCM,MACGA,EAAKU,aAAanB,EAAcO,kBAAkBE,qB,CAzCzDW,CAAa/B,E,CAGR,SAASgC,EAAUC,GACxBzC,QAAQC,IAAIwC,E,CCId,SAASC,EAAgB3C,GACvBC,QAAQC,IAAIF,GAEZD,EAAkBC,EAAS4C,QAAQpC,KAAKW,GAAa0B,MAAMJ,E,CAG7D,SAASK,EAAcJ,GACrBzC,QAAQC,IAAIwC,GACZ5B,IAAoBN,KAAKW,GAAa0B,MAAMJ,E,CAjB9CM,iBAAiB,oBAEV,WACL,OAAOC,UAAUC,YAAYC,mBAC3BP,EACAG,E","sources":["src/js/weather-api-service.js","src/js/weather-widget.js","src/js/user-geolocation.js"],"sourcesContent":["const BASE_URL = 'https://api.openweathermap.org/data/2.5/weather?';\n\nconst REQUEST_OPTIONS = {\n  appid: 'dbe190140250d3087dbd292674c0b7da',\n  lat: 51.5085,\n  lon: -0.1257,\n  units: 'metric',\n};\n\nexport async function getCurrentWeather(position) {\n  console.log(position);\n\n  REQUEST_OPTIONS.lat = position.latitude;\n  REQUEST_OPTIONS.lon = position.longitude;\n\n  const options = new URLSearchParams(REQUEST_OPTIONS);\n  return await fetch(`${BASE_URL}${options}`).then(response => {\n    if (!response.ok) {\n      throw new Error(response.status);\n    }\n    return response.json();\n  });\n}\n\nexport async function getDefaultWeather() {\n  const options = new URLSearchParams(REQUEST_OPTIONS);\n  return await fetch(`${BASE_URL}${options}`).then(response => {\n    if (!response.ok) {\n      throw new Error(response.status);\n    }\n    return response.json();\n  });\n}\n","const refs = {\n  weatherWidget: document.querySelector('.weather-widget'),\n};\n\nexport function checkResult(response) {\n  console.log(response);\n  createMarkup(response);\n}\n\nexport function showError(error) {\n  console.log(error);\n}\n\nfunction createMarkup(response) {\n  const formattedDate = {\n    days: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n    months: [\n      'Jan',\n      'Feb',\n      'Mar',\n      'Apr',\n      'May',\n      'Jun',\n      'Jul',\n      'Aug',\n      'Sep',\n      'Oct',\n      'Nov',\n      'Dec',\n    ],\n    getFormattedDay(date) {\n      return this.days[date.getDay()];\n    },\n    getFormattedMonth(date) {\n      return this.months[date.getMonth()];\n    },\n  };\n  const date = new Date();\n  const markup = `<div class=\"weather-info\">\n      <span class=\"temperature\">${response.main.temp.toFixed(0)}&#176;</span>\n      <span class=\"divider\"></span>\n      <span class=\"weather-description\">${response.weather[0].main}</span>\n      <span class=\"geolocation\">${response.name}</span>\n      </span>\n    </div>\n    <div class=\"date\">${formattedDate.getFormattedDay(\n      date\n    )} ${date.getDate()} ${formattedDate.getFormattedMonth(date)}</div>\n  </div>`;\n  showWeather(markup);\n}\n\nfunction showWeather(markup) {\n  refs.weatherWidget.insertAdjacentHTML('beforeend', markup);\n}\n","import { getCurrentWeather } from './weather-api-service';\nimport { getDefaultWeather } from './weather-api-service';\nimport { checkResult } from './weather-widget';\nimport { showError } from './weather-widget';\n\naddEventListener('DOMContentLoaded', getUserLocation);\n\nexport function getUserLocation() {\n  return navigator.geolocation.getCurrentPosition(\n    positionHandler,\n    positionError\n  );\n}\n\nfunction positionHandler(position) {\n  console.log(position);\n\n  getCurrentWeather(position.coords).then(checkResult).catch(showError);\n}\n\nfunction positionError(error) {\n  console.log(error);\n  getDefaultWeather().then(checkResult).catch(showError);\n}\n"],"names":["$49281123daaa4022$var$REQUEST_OPTIONS","appid","lat","lon","units","async","$49281123daaa4022$export$a7a8d53ca6ad3a0","position","console","log","latitude","longitude","options","URLSearchParams","fetch","then","response","ok","Error","status","json","$49281123daaa4022$export$d3361cdbb6020067","$d9eced24bb27ea1f$var$refs","weatherWidget","document","querySelector","$d9eced24bb27ea1f$export$778e9fcff4a6507d","formattedDate","days","months","getFormattedDay","date","this","getDay","getFormattedMonth","getMonth","date1","Date","markup","insertAdjacentHTML","$d9eced24bb27ea1f$var$showWeather","main","temp","toFixed","weather","name","getDate","$d9eced24bb27ea1f$var$createMarkup","$d9eced24bb27ea1f$export$3879b24e8245693d","error","$e357e0c6b59d5260$var$positionHandler","coords","catch","$e357e0c6b59d5260$var$positionError","addEventListener","navigator","geolocation","getCurrentPosition"],"version":3,"file":"index.d1fead91.js.map"}