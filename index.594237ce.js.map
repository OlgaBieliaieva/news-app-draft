{"mappings":"AAAA,MAEMA,EAAkB,CACtBC,MAAO,mCACPC,IAAK,QACLC,KAAK,MACLC,MAAO,UAGFC,eAAeC,EAAkBC,GACtCC,QAAQC,IAAIF,GAEZP,EAAgBE,IAAMK,EAASG,SAC/BV,EAAgBG,IAAMI,EAASI,UAE/B,MAAMC,EAAU,IAAIC,gBAAgBb,GACpC,aAAac,MAAM,mDAAcF,KAAWG,MAAKC,IAC/C,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAMF,EAASG,QAE3B,OAAOH,EAASI,MAAM,G,CAInBf,eAAegB,IACpB,MAAMT,EAAU,IAAIC,gBAAgBb,GACpC,aAAac,MAAM,mDAAcF,KAAWG,MAAKC,IAC/C,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAMF,EAASG,QAE3B,OAAOH,EAASI,MAAM,G,CC9B1B,MAAME,EAAO,CACXC,cAAeC,SAASC,cAAc,oBACtCC,KAAMF,SAASG,iBAAiB,UAG5BC,EAEI,qBAMV,SAASC,EAAKC,GACZtB,QAAQC,IAAIqB,GACRN,SAASO,WAAa,MACxBvB,QAAQC,IAAI,qBACZa,EAAKI,KAAK,GAAGM,WAAWC,aAAaX,EAAKC,cAAeD,EAAKI,KAAK,I,CAwBhE,SAASQ,EAAYlB,GAC1BR,QAAQC,IAAIO,GAQd,SAAsBA,GACpB,MAAMmB,EAAgB,CACpBC,KAAM,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACjDC,OAAQ,CACN,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OAEFC,gBAAgBC,GACd,OAAOC,KAAKJ,KAAKG,EAAKE,S,EAExBC,kBAAkBH,GAChB,OAAOC,KAAKH,OAAOE,EAAKI,W,GAGtBC,EAAO,IAAIC,MA6BnB,SAAqBC,GACfC,OAAOhB,WAAa,KACtBT,EAAKI,KAAK,GAAGsB,mBAAmB,YAAaF,GAE3CC,OAAOhB,YAAc,KAAOgB,OAAOhB,WAAa,KAClDT,EAAKI,KAAK,GAAGsB,mBAAmB,cAAeF,GAE/CxB,EAAKI,KAAK,GAAGsB,mBAAmB,cAAeF,E,CAVjDG,CAzBe,wIAGiBjC,EAASkC,KAAKC,KAAKC,QAAQ,qHAEzBpC,EAASqC,QAAQ,GAAGH,4OAKrBlC,EAASsC,0GAKtCtC,EAASqC,QAAQ,GAAGE,qBACLvC,EAASqC,QAAQ,GAAGH,sDACjBf,EAAcG,gBAAgBM,2BAE9CA,EAAKY,aAAarB,EAAcO,kBACpCE,MACGA,EAAKa,8C,CArDVC,CAAa1C,E,CAGR,SAAS2C,EAAUC,GACxBpD,QAAQC,IAAImD,E,CCjCd,SAASC,EAAgBtD,GACvBC,QAAQC,IAAIF,GAEZD,EAAkBC,EAASuD,QAAQ/C,KAAKmB,GAAa6B,MAAMJ,E,CAG7D,SAASK,EAAcJ,GACrBpD,QAAQC,IAAImD,GACZvC,IAAoBN,KAAKmB,GAAa6B,MAAMJ,E,CDZ9CnD,QAAQC,IAAIsC,OAAOhB,YACnBgB,OAAOkB,WAAW,GAAGrC,KAAoBsC,iBAAiB,SAAUrC,GACpEA,EAAKkB,OAAOkB,WAAW,GAAGrC,MCP1BsC,iBAAiB,oBAEV,WACL,OAAOC,UAAUC,YAAYC,mBAC3BR,EACAG,E","sources":["src/js/weather-api-service.js","src/js/weather-widget.js","src/js/user-geolocation.js"],"sourcesContent":["const BASE_URL = 'https://api.openweathermap.org/data/2.5/weather?';\n\nconst REQUEST_OPTIONS = {\n  appid: 'dbe190140250d3087dbd292674c0b7da',\n  lat: 51.5085,\n  lon: -0.1257,\n  units: 'metric',\n};\n\nexport async function getCurrentWeather(position) {\n  console.log(position);\n\n  REQUEST_OPTIONS.lat = position.latitude;\n  REQUEST_OPTIONS.lon = position.longitude;\n\n  const options = new URLSearchParams(REQUEST_OPTIONS);\n  return await fetch(`${BASE_URL}${options}`).then(response => {\n    if (!response.ok) {\n      throw new Error(response.status);\n    }\n    return response.json();\n  });\n}\n\nexport async function getDefaultWeather() {\n  const options = new URLSearchParams(REQUEST_OPTIONS);\n  return await fetch(`${BASE_URL}${options}`).then(response => {\n    if (!response.ok) {\n      throw new Error(response.status);\n    }\n    return response.json();\n  });\n}\n","const refs = {\n  weatherWidget: document.querySelector('.weather__widget'),\n  list: document.querySelectorAll('.item'),\n};\n\nconst mediaList = {\n  mobile: '(min-width: 480px)',\n  tablet: '(min-width: 768px)',\n  desktop: '(min-width: 1200px)',\n};\nconsole.log(window.innerWidth);\nwindow.matchMedia(`${mediaList.tablet}`).addEventListener('change', show);\nshow(window.matchMedia(`${mediaList.tablet}`));\nfunction show(e) {\n  console.log(e);\n  if (document.innerWidth > 768) {\n    console.log('remove is working');\n    refs.list[0].parentNode.replaceChild(refs.weatherWidget, refs.list[0]);\n  }\n}\n// const mediaQueryList = window.matchMedia('(min-width: 768px)');\n// window\n//   .matchMedia(mediaList.mobile)\n//   .addEventListener('change', handleTabletChange);\n// window\n//   .matchMedia(mediaList.tablet)\n//   .addEventListener('change', handleTabletChange);\n// window\n//   .matchMedia(mediaList.desktop)\n//   .addEventListener('change', handleTabletChange);\n// function handleTabletChange(e) {\n//   console.log(e);\n//   if (e.matches) {\n//     console.log('!!!');\n//   }\n// }\n\n// handleTabletChange(window.matchMedia(mediaList.mobile));\n// handleTabletChange(window.matchMedia(mediaList.tablet));\n// handleTabletChange(window.matchMedia(mediaList.desktop));\n\nexport function checkResult(response) {\n  console.log(response);\n  createMarkup(response);\n}\n\nexport function showError(error) {\n  console.log(error);\n}\n\nfunction createMarkup(response) {\n  const formattedDate = {\n    days: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n    months: [\n      'Jan',\n      'Feb',\n      'Mar',\n      'Apr',\n      'May',\n      'Jun',\n      'Jul',\n      'Aug',\n      'Sep',\n      'Oct',\n      'Nov',\n      'Dec',\n    ],\n    getFormattedDay(date) {\n      return this.days[date.getDay()];\n    },\n    getFormattedMonth(date) {\n      return this.months[date.getMonth()];\n    },\n  };\n  const date = new Date();\n  const markup = `<div class=\"weather__widget\">\n  <div class=\"weather__content\">\n    <div class=\"weather__wrapper\">\n      <span class=\"temperature\">${response.main.temp.toFixed(0)}&#176;</span>\n      <div class=\"weather__wrapper weather__wrapper--column\">\n        <span class=\"description\">${response.weather[0].main}</span>\n        <div class=\"weather__wrapper weather__wrapper--accent\">\n          <svg class=\"location-icon\">\n            <use href=\"./images/icons.svg#icon-location\"></use>\n          </svg>\n          <span class=\"location\">${response.name}</span>\n        </div>\n      </div>\n    </div>\n    <img src=\"https://openweathermap.org/img/wn/${\n      response.weather[0].icon\n    }@2x.png\" alt=\"${response.weather[0].main}\" class=\"weather-icon\">\n    <div class=\"date\">${formattedDate.getFormattedDay(date)}\n      <br />\n      ${date.getDate()} ${formattedDate.getFormattedMonth(\n    date\n  )} ${date.getFullYear()}\n    </div>\n  </div>\n</div>`;\n  showWeather(markup);\n}\n\nfunction showWeather(markup) {\n  if (window.innerWidth < 768) {\n    refs.list[0].insertAdjacentHTML('beforeend', markup);\n  }\n  if (window.innerWidth >= 768 && window.innerWidth < 1200) {\n    refs.list[1].insertAdjacentHTML('beforebegin', markup);\n  } else {\n    refs.list[4].insertAdjacentHTML('beforebegin', markup);\n  }\n}\n// refs.weatherWidget.insertAdjacentHTML('beforeend', markup);\n// if (mediaQueryList.matches) {\n//   refs.list[1].insertAdjacentHTML('beforebegin', markup);\n// } else {\n//   refs.list[3].insertAdjacentHTML('afterend', markup);\n// }\n","import { getCurrentWeather } from './weather-api-service';\nimport { getDefaultWeather } from './weather-api-service';\nimport { checkResult } from './weather-widget';\nimport { showError } from './weather-widget';\n\naddEventListener('DOMContentLoaded', getUserLocation);\n\nexport function getUserLocation() {\n  return navigator.geolocation.getCurrentPosition(\n    positionHandler,\n    positionError\n  );\n}\n\nfunction positionHandler(position) {\n  console.log(position);\n\n  getCurrentWeather(position.coords).then(checkResult).catch(showError);\n}\n\nfunction positionError(error) {\n  console.log(error);\n  getDefaultWeather().then(checkResult).catch(showError);\n}\n"],"names":["$49281123daaa4022$var$REQUEST_OPTIONS","appid","lat","lon","units","async","$49281123daaa4022$export$a7a8d53ca6ad3a0","position","console","log","latitude","longitude","options","URLSearchParams","fetch","then","response","ok","Error","status","json","$49281123daaa4022$export$d3361cdbb6020067","$d9eced24bb27ea1f$var$refs","weatherWidget","document","querySelector","list","querySelectorAll","$d9eced24bb27ea1f$var$mediaList","$d9eced24bb27ea1f$var$show","e","innerWidth","parentNode","replaceChild","$d9eced24bb27ea1f$export$778e9fcff4a6507d","formattedDate","days","months","getFormattedDay","date","this","getDay","getFormattedMonth","getMonth","date1","Date","markup","window","insertAdjacentHTML","$d9eced24bb27ea1f$var$showWeather","main","temp","toFixed","weather","name","icon","getDate","getFullYear","$d9eced24bb27ea1f$var$createMarkup","$d9eced24bb27ea1f$export$3879b24e8245693d","error","$e357e0c6b59d5260$var$positionHandler","coords","catch","$e357e0c6b59d5260$var$positionError","matchMedia","addEventListener","navigator","geolocation","getCurrentPosition"],"version":3,"file":"index.594237ce.js.map"}